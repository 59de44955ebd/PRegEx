<HTML>
<HEAD>
<TITLE>IMoaCache</TITLE>
<link href="../xdk.css" rel="stylesheet" type="text/css">
</HEAD>
<body>
<A HREF="../moadg/index.htm">MOA Developer's Guide</A> <BR>
<A HREF="index.htm">MOA Interfaces</A> | <A HREF="momthndx.htm">MOA Methods</A> | <A HREF="motypndx.htm">MOA Types and Misc API</A>
<hr width=45% align=left>
<h2>IMoaCache</h2>
<hr width=45% align=left>
<P> Interface ID: <CODE>IID_IMoaCache<BR>
  </CODE>Pointer type: <CODE>PIMoaCache<BR>
  </CODE>Inheritance: <A HREF = "unknown.htm">IMoaUnknown</A> <BR>
  Header file: <A HREF = "../../include/moastdif.h">moastdif.h</A> <BR>
<h3>Description</h3>
<DL>
  <DT>
  <DD><BR>
    The IMoaCache interface is provided by all MOA applications for
    use in registering an Xtra. Xtras register themselves by implementing
    the Xtra interface <TT>IMoaRegister</TT>.
    They can initialize themselves from cached information by implementing
    the <TT>IMoaInitFromDict</TT> interface. To get access to the cache at other times, you call
    the <TT>MoaGetCache()</TT> method of the <TT>IMoaCallback</TT> interface. The <TT>IMoaDict</TT> interface is used to get and set individual entries in a cache. <BR>
    <BR>
    An application's cache contains nested dictionaries of information
    about files contained in its Xtras folders, both the application-specific
    Xtras folder and the system-wide Xtras folder. The dictionaries
    in the cache form a nested hierarchy. <BR>
    <BR>
    At the top level, the cache contains a dictionary for each file
    found in the Xtras folders. Cached files include all files found
    in the Xtras folders, both those that contain Xtras and those
    that don't. This enables an application to cache non-MOA extension
    files. <BR>
    <BR>
    Within each file dictionary, there may be zero, one, or more Xtra
    dictionaries. A file dictionary will contain no Xtra dictionary
    if the file isn't an Xtras file. When a cached file contains Xtras,
    the file dictionary contains one Xtra dictionary for each Xtra. <BR>
    <BR>
    Within each Xtra dictionary, the cache contains one registry dictionary
    per class/interface that an application registers. If a given
    Xtra contains three classes, each implementing an interface of
    interest to an application, its Xtra dictionary will contain three
    registry dictionaries. <BR>
    <BR>
    The methods of <TT>IMoaCache</TT> provide mechanisms for registering classes and interfaces and
    for accessing the various dictionaries in a cache. The <TT>AddRegistryEntry()</TT> method is the main method used in an Xtra's <TT>IMoaRegister</TT> implementation to register its classes and interfaces. This method
    returns a pointer to a specific registry dictionary, which can
    be used to store other information about an Xtra class and its
    interface. Other methods can be used to access file dictionaries,
    Xtra dictionaries, and registry dictionaries. To manipulate the
    entries in a dictionary, you use methods of the <TT>IMoaDict</TT> interface. <BR>
    <BR>
</DL>
<P>
<h3>Methods</h3>
<DL>
  <DD>
</DL>
<h4>Counting entries </h4>
<DL>
  <DT>
  <DD><A HREF = "#EnumerateFileEntries">EnumerateFileEntries()</A> <BR>
    <A HREF = "#EnumerateXtraEntries">EnumerateXtraEntries()</A> <BR>
    <A HREF = "#EnumerateRegistryEntries">EnumerateRegistryEntries()</A> <BR>
    <A HREF = "#SetXtraEntryNoncacheable">SetXtraEntryNoncacheable()</A>
</DL>
<h4>Modifying entries </h4>
<DL>
  <DT>
  <DD><A HREF = "#AddRegistryEntry">AddRegistryEntry()</A>
</DL>
<h4>Creating an instance </h4>
<DL>
  <DT>
  <DD><A HREF = "#GetInstanceFromRegistry">GetInstanceFromRegistry()</A> <BR>
    <A HREF = "#CreateNewInstanceFromRegistry">CreateNewInstanceFromRegistry()</A>
</DL>
<h4>Accessing entries </h4>
<DL>
  <DT>
  <DD><A HREF = "#EnumerateRegistryEntriesFromFile">EnumerateRegistryEntriesFromFile()</A> <BR>
    <A HREF = "#GetFileSpecFromFileDict">GetFileSpecFromFileDict()</A>
</DL>
<hr width=45% align=left>
<h3><A NAME="AddRegistryEntry">AddRegistryEntry()</A></h3>
<h4>Syntax</h4>
<DL>
  <DD>
  <DT>AddRegistryEntry(PIMoaCache<I>This</I>,
  <DD><BR>
    PIMoaXtraEntryDict<I>pXtraDict</I>, <BR>
    ConstPMoaClassID<I>pClassID</I>, <BR>
    ConstPMoaInterfaceID<I>pInterfaceID</I>, <BR>
    PIMoaRegistryEntryDict FAR *<I>ppRegistryDict</I>)
  </DL>
<h4>Parameters</h4>
<DL>
  <DD>
  <DT><CODE><I>This</I></CODE>
  <DD>Pointer to the <CODE>IMoaCache</CODE> interface<BR>
    <BR>
  <DT><CODE><I>pXtraDict</I></CODE>
  <DD><CODE>PIMoaXtraEntryDict</CODE><TT>IMoaDict</TT> instance for the Xtra dictionary <BR>
    <BR>
  <DT><CODE><I>pClassID</I></CODE>
  <DD><CODE>ConstPMoaClassID</CODE>CLSID of the class being registered <BR>
    <BR>
  <DT><CODE><I>pInterfaceID</I></CODE>
  <DD><CODE>ConstPMoaInterfaceID</CODE>IID of the interface being
    registered <BR>
    <BR>
  <DT><CODE><I>ppRegistryDict</I></CODE>
  <DD><CODE>PIMoaRegistryEntryDict FAR *</CODE><TT>IMoaDict</TT> instance for the registry dictionary <BR>
    <BR>
</DL>
<h4>Returns</h4>
<DL>
  <DT>
  <DD><CODE>MoaError</CODE>
</DL>
<h4>Description</h4>
<DL>
  <DT>
  <DD><BR>
    Call this method inside your Xtra's implementation of the <TT>Register()</TT> method to add a registry entry to the cache. Pass the instance
    of <TT>IMoaDict</TT> passed
    to you by <TT>Register()</TT>as
    the <TT><I>pXtraDict</I></TT> argument. The class and interface passed to this method are typically
    (but not necessarily) implemented within the same Xtra as the <TT>Register()</TT> method. <BR>
    <BR>
    The argument for <TT><I>ppRegistryDict</I></TT> should be a pointer to an IMoaDict. The interface returned can
    be used to add custom information to the registry entry, such
    as any key/value combinations specified for a particular interface.
    If you don't need the registry dictionary, pass NULL. <BR>
    <BR>
    <B>Note: </B>Do not call <TT>Release()</TT> on <TT><I>ppRegistryDict</I></TT>. <BR>
    <BR>
</DL>
<P>
<hr width=45% align=left>
<h3><A NAME="CreateNewInstanceFromRegistry">CreateNewInstanceFromRegistry()</A> </h3>
<h4>Syntax</h4>
<DL>
  <DD>
  <DT>CreateNewInstanceFromRegistry(PIMoaCache<I>This</I>,
  <DD><BR>
    PIMoaRegistryEntryDict<I>pRegistryDict</I>, <BR>
    ConstPMoaInterfaceID<I>pInterfaceID</I>, <BR>
    PPMoaVoid<I>ppvObj</I>)
  </DL>
<h4>Parameters</h4>
<DL>
  <DD>
  <DT><CODE><I>This</I></CODE>
  <DD>Pointer to the <CODE>IMoaCache</CODE> interface<BR>
    <BR>
  <DT><CODE><I>pRegistryDict</I></CODE>
  <DD><CODE>PIMoaRegistryEntryDict</CODE>Registry dictionary for
    the class/interface to instantiate <BR>
    <BR>
  <DT><CODE><I>pInterfaceID</I></CODE>
  <DD><CODE>ConstPMoaInterfaceID</CODE>Interface to return in ppvObj <BR>
    <BR>
  <DT><CODE><I>ppvObj</I></CODE>
  <DD><CODE>PPMoaVoid</CODE>Pointer to returned interface <BR>
    <BR>
</DL>
<h4>Returns</h4>
<DL>
  <DT>
  <DD><CODE>MoaError</CODE>
</DL>
<h4>Description</h4>
<DL>
  <DT>
  <DD><BR>
    <B>Note: </B>This method is intended more for use in MOA application
    code than in Xtra code. MOA applications generally determine when
    and how to create instances of specific Xtra classes and interfaces. <BR>
    <BR>
    Create an instance of the class and interface cached in the dictionary <TT><I>pRegistryDict</I></TT> and return it in <TT><I>ppvObj</I></TT>.
    If <TT><I>pInterfaceID</I></TT> is not <TT>NULL</TT>, that
    interface will be the one returned in <TT><I>ppvObj</I></TT>;
    if the class doesn't support that interface, an error is returned.
    If <TT><I>pInterfaceID</I></TT> is <TT>NULL</TT>, the interface
    returned is the one specified in the <TT><I>pRegistryDict</I></TT>. <BR>
    <BR>
    The interface returned belongs to the caller, who must call <TT>Release()</TT> on it when done.<BR>
    <BR>
</DL>
<P>
<hr width=45% align=left>
<h3><A NAME="EnumerateFileEntries">EnumerateFileEntries()</A> </h3>
<h4>Syntax</h4>
<DL>
  <DD>
  <DT>EnumerateFileEntries(PIMoaCache<I>This</I>,
  <DD><BR>
    MoaCacheFileEntryEnumProc<I>pEnumProc</I>, <BR>
    PMoaVoid<I>refCon</I>)
  </DL>
<h4>Parameters</h4>
<DL>
  <DD>
  <DT><CODE><I>This</I></CODE>
  <DD>Pointer to the <CODE>IMoaCache</CODE> interface<BR>
    <BR>
  <DT><CODE><I>pEnumProc</I></CODE>
  <DD><CODE>MoaCacheFileEntryEnumProc</CODE>File enumeration function <BR>
    <BR>
  <DT><CODE><I>refCon</I></CODE>
  <DD><CODE>PMoaVoid</CODE>Pointer to structure for collecting file
    information <BR>
    <BR>
</DL>
<h4>Returns</h4>
<DL>
  <DT>
  <DD><CODE>MoaError</CODE>
</DL>
<h4>Description<BR>
  <BR>
  </h4>
<P> Enumerates all files cached by the application. The cache covers
  both the application-specific and general Xtras folders, and includes
  both Xtras and other files found there. The enumeration function
  you pass in as <TT><I>pEnumProc</I></TT> should have the following syntax:<BR>
<PRE>
        typedef MoaError (*MoaCacheFileEntryEnumProc)(
                PIMoaFileEntryDict pFileDict, 
                ConstPMoaSystemFileSpec pFileSpec, 
                MoaWide fileDate, 
                MoaUlong fileType,      /* Mac OS type */
                PMoaVoid refCon); 
        
</PRE>
<DL>
  <DT>
  <DD>Your enumeration function will be called repeatedly for each
    file in the cache. The parameters passed to your function include
    the file spec, file modification date, and file type (meaningful
    only on Macintosh systems). The <TT><I>pFileSpec</I></TT> passed is system dependent: it is an <TT>FSSpec</TT> on the Macintosh and a character string for a pathname on Windows.
    The <TT><I>refCon</I></TT> passed when you called <TT>EnumerateFileEntries()</TT> is in turn passed to your enumeration function. You can use <TT><I>refCon</I></TT> to pass a structure pointer into your enumeration function for
    collecting information about files of interest; if you don't need
    this pointer, pass NULL . Returning a nonzero value from your
    enumeration function will terminate the enumeration.<BR>
    <BR>
    Important note: the <TT><I>pFileSpec</I></TT> passed to you may be NULL.<BR>
    <BR>
</DL>
<P>
<hr width=45% align=left>
<h3><A NAME="EnumerateRegistryEntries">EnumerateRegistryEntries()</A> </h3>
<h4>Syntax</h4>
<DL>
  <DD>
  <DT>EnumerateRegistryEntries(PIMoaCache<I>This</I>,
  <DD><BR>
    MoaCacheRegistryEntryEnumProc<I>pEnumProc</I>, <BR>
    PMoaVoid<I>refCon</I>)
  </DL>
<h4>Parameters</h4>
<DL>
  <DD>
  <DT><CODE><I>This</I></CODE>
  <DD>Pointer to the <CODE>IMoaCache</CODE> interface<BR>
    <BR>
  <DT><CODE><I>pEnumProc</I></CODE>
  <DD><CODE>MoaCacheRegistryEntryEnumProc</CODE>Registry dictionary
    enumeration function <BR>
    <BR>
  <DT><CODE><I>refCon</I></CODE>
  <DD><CODE>PMoaVoid</CODE>Pointer to structure for collecting file
    information <BR>
    <BR>
</DL>
<h4>Returns</h4>
<DL>
  <DT>
  <DD><CODE>MoaError</CODE>
</DL>
<h4>Description<BR>
  <BR>
  </h4>
<P> Call this method to enumerate all registry dictionaries in the
  cache. The cache contains one registry dictionary for each class/interface
  provided by Xtras. The enumeration function you pass in as <TT><I>pEnumProc</I></TT> should have the following syntax:<BR>
<PRE>
        typedef MoaError (*MoaCacheRegistryEntryEnumProc)(
                PIMoaRegistryEntryDict pRegistryDict, 
                ConstPMoaClassID pClassID, 
                ConstPMoaInterfaceID pInterfaceID, 
                PMoaVoid refCon); 
        
</PRE>
<DL>
  <DT>
  <DD>Your procedure will be repeatedly called for each registry
    in the cache. <TT>pRegistryDict</TT> provides the registry dictionary for the class/interface combination. <TT>pClassID</TT> and <TT>pInterfaceID</TT> provide the class and interface ID of the registered ability.
    You can use the class/interface pair to create the object. It
    is generally more convenient to use the <TT>pRegistryDict</TT> and <TT>pInterfaceID</TT> parameters
    to call the <TT>IMoaCache</TT> methods <TT>GetInstanceFromRegistry()
    or CreateInstanceFromRegistry()</TT> to instantiate the
    particular object and interface.<BR>
    <BR>
    The <TT><I>refCon</I></TT> passed when you called <TT>EnumerateRegistryEntries()</TT> is in turn passed to your enumeration function. You can use <TT><I>refCon</I></TT> to pass a structure pointer into your enumeration function for
    collecting information about classes and interface of interest;
    if you don't need this pointer, pass NULL . Returning a nonzero
    value from your enumeration function will terminate the enumeration. <BR>
    <BR>
</DL>
<P>
<hr width=45% align=left>
<h3><A NAME="EnumerateRegistryEntriesFromFile">EnumerateRegistryEntriesFromFile()</A> </h3>
<h4>Syntax</h4>
<DL>
  <DD>
  <DT>EnumerateRegistryEntriesFromFile(PIMoaCache<I>This</I>,
  <DD><BR>
    ConstPMoaSystemFileSpec<I>pFileSpec</I>, <BR>
    MoaLong<I>maxFolderLevels</I>, <BR>
    MoaCacheRegistryEntryEnumFromFileProc<I>pEnumProc</I>, <BR>
    PMoaVoid<I>refCon</I>)
  </DL>
<h4>Parameters</h4>
<DL>
  <DD>
  <DT><CODE><I>This</I></CODE>
  <DD>Pointer to the <CODE>IMoaCache</CODE> interface<BR>
    <BR>
  <DT><CODE><I>pFileSpec</I></CODE>
  <DD><CODE>ConstPMoaSystemFileSpec</CODE>FSSpec on Mac/pathname
    string in Windows <BR>
    <BR>
  <DT><CODE><I>maxFolderLevels</I></CODE>
  <DD><CODE>MoaLong</CODE>Search depth <BR>
    <BR>
  <DT><CODE><I>pEnumProc</I></CODE>
  <DD><CODE>MoaCacheRegistryEntryEnumFromFileProc</CODE>Registry
    dictionary enumeration function <BR>
    <BR>
  <DT><CODE><I>refCon</I></CODE>
  <DD><CODE>PMoaVoid</CODE>Pointer to structure for collecting registry
    information <BR>
    <BR>
</DL>
<h4>Returns</h4>
<DL>
  <DT>
  <DD><CODE>MoaError</CODE>
</DL>
<h4>Description<BR>
  <BR>
  </h4>
<P> Similar to the <TT>EnumerateRegistryEntries()</TT> method, this method enumerates all registry entries for a specific
  folder or file. Additional information provided by the enumeration
  function includes the file and Xtra each came from. The enumeration
  function you pass in as <TT><I>pEnumProc</I></TT> should have the following syntax:<BR>
<PRE>
        typedef MoaError (*MoaCacheRegistryEntryEnumFromFileProc)(
                PIMoaFileEntryDict pFileDict, 
                ConstPMoaSystemFileSpec pFileSpec, 
                MoaWide fileDate, 
                MoaUlong fileType,      /* Mac OS type */
                PIMoaXtraEntryDict pXtraDict, 
                PIMoaRegistryEntryDict pRegistryDict, 
                ConstPMoaClassID pClassID, 
                ConstPMoaInterfaceID pInterfaceID, 
                PMoaVoid refCon); 
        
</PRE>
<DL>
  <DT>
  <DD><TT><I>pFileSpec</I></TT> returned by the enumeration function might be NULL.<BR>
    <BR>
</DL>
<P>
<hr width=45% align=left>
<h3><A NAME="EnumerateXtraEntries">EnumerateXtraEntries()</A> </h3>
<h4>Syntax</h4>
<DL>
  <DD>
  <DT>EnumerateXtraEntries(PIMoaCache<I>This</I>,
  <DD><BR>
    MoaCacheXtraEntryEnumProc<I>pEnumProc</I>, <BR>
    PMoaVoid<I>refCon</I>)
  </DL>
<h4>Parameters</h4>
<DL>
  <DD>
  <DT><CODE><I>This</I></CODE>
  <DD>Pointer to the <CODE>IMoaCache</CODE> interface<BR>
    <BR>
  <DT><CODE><I>pEnumProc</I></CODE>
  <DD><CODE>MoaCacheXtraEntryEnumProc</CODE>Xtra dictionary enumeration
    function <BR>
    <BR>
  <DT><CODE><I>refCon</I></CODE>
  <DD><CODE>PMoaVoid</CODE>Pointer to structure for collecting Xtra
    information <BR>
    <BR>
</DL>
<h4>Returns</h4>
<DL>
  <DT>
  <DD><CODE>MoaError</CODE>
</DL>
<h4>Description<BR>
  <BR>
  </h4>
<P> Call this function to enumerate all Xtra dictionaries in the cache.
  The enumeration function you pass in as <TT><I>pEnumProc</I></TT> should have the following syntax:<BR>
<PRE>
        typedef MoaError (*MoaCacheXtraEntryEnumProc)(
                PIMoaXtraEntryDict pXtraDict, 
                PMoaVoid refCon); 
        
</PRE>
<DL>
  <DT>
  <DD>Your enumeration function will be called repeatedly for each
    Xtra in the cache. The parameters passed to your function include
    the IMoaDict interface to the dictionary for each Xtra. The <TT><I>refCon</I></TT> passed when you called <TT>EnumerateXtraEntries()</TT> is in turn passed to your enumeration function. You can use <TT><I>refCon</I></TT> to pass a structure pointer into your enumeration function for
    collecting information about Xtras of interest; if you don't need
    this pointer, pass NULL . Returning a nonzero value from your
    enumeration function will terminate the enumeration.<BR>
    <BR>
</DL>
<P>
<hr width=45% align=left>
<h3><A NAME="GetFileSpecFromFileDict">GetFileSpecFromFileDict()</A> </h3>
<h4>Syntax</h4>
<DL>
  <DD>
  <DT>GetFileSpecFromFileDict(PIMoaCache<I>This</I>,
  <DD><BR>
    PIMoaFileEntryDict<I>pFileDict</I>, <BR>
    PMoaSystemFileSpec<I>pFileSpec</I>, <BR>
    MoaLong<I>fileSpecLen</I>)
  </DL>
<h4>Parameters</h4>
<DL>
  <DD>
  <DT><CODE><I>This</I></CODE>
  <DD>Pointer to the <CODE>IMoaCache</CODE> interface<BR>
    <BR>
  <DT><CODE><I>pFileDict</I></CODE>
  <DD><CODE>PIMoaFileEntryDict</CODE><TT>IMoaDict</TT> interface for a particular file entry <BR>
    <BR>
  <DT><CODE><I>pFileSpec</I></CODE>
  <DD><CODE>PMoaSystemFileSpec</CODE>Returned file spec <BR>
    <BR>
  <DT><CODE><I>fileSpecLen</I></CODE>
  <DD><CODE>MoaLong</CODE>Length of returned file spec <BR>
    <BR>
</DL>
<h4>Returns</h4>
<DL>
  <DT>
  <DD><CODE>MoaError</CODE>
</DL>
<h4>Description</h4>
<DL>
  <DT>
  <DD>Given a file dictionary <TT><I>pFileDict</I></TT>,
    from either <TT>EnumerateFileEntries()</TT> or <TT>EnumerateRegistryEntriesFromFile()</TT>, <TT>GetFileSpecFromFileDict() </TT>returns
    the <TT>MoaSystemFileSpec</TT> associated with it. <BR>
</DL>
<P>
<hr width=45% align=left>
<h3><A NAME="GetInstanceFromRegistry">GetInstanceFromRegistry()</A> </h3>
<h4>Syntax</h4>
<DL>
  <DD>
  <DT>GetInstanceFromRegistry(PIMoaCache<I>This</I>,
  <DD><BR>
    PIMoaRegistryEntryDict<I>pRegistryDict</I>, <BR>
    ConstPMoaInterfaceID<I>pInterfaceID</I>, <BR>
    PPMoaVoid<I>ppvObj</I>)
  </DL>
<h4>Parameters</h4>
<DL>
  <DD>
  <DT><CODE><I>This</I></CODE>
  <DD>Pointer to the <CODE>IMoaCache</CODE> interface<BR>
    <BR>
  <DT><CODE><I>pRegistryDict</I></CODE>
  <DD><CODE>PIMoaRegistryEntryDict</CODE>Registry dictionary for
    the class/interface to instantiate <BR>
    <BR>
  <DT><CODE><I>pInterfaceID</I></CODE>
  <DD><CODE>ConstPMoaInterfaceID</CODE>Interface to return in ppvObj <BR>
    <BR>
  <DT><CODE><I>ppvObj</I></CODE>
  <DD><CODE>PPMoaVoid</CODE>Pointer to returned interface <BR>
    <BR>
</DL>
<h4>Returns</h4>
<DL>
  <DT>
  <DD><CODE>MoaError</CODE>
</DL>
<h4>Description</h4>
<DL>
  <DT>
  <DD><BR>
    <B>Note:</B> This method is intended more for use in MOA application
    code than in Xtra code. MOA applications generally determine when
    and how to create instances of specific Xtra classes and interfaces. <BR>
    <BR>
    Similar to <TT>CreateNewInstanceFromRegistry()</TT>,
    this method only creates a new instance of a particular class
    and interface the first time it is called. Subsequent calls return
    a new interface (via <TT>QueryInterface()</TT>)
    of the same object. The underlying object lives until MOA is shut
    down (it's kept in an internal table to MOA).<BR>
    <BR>
    Note that although the object remains in existence, the interface
    returned belongs to the caller, who still must call <TT>Release()</TT> it when done.<BR>
    <BR>
</DL>
<P>
<hr width=45% align=left>
<h3><A NAME="SetXtraEntryNoncacheable">SetXtraEntryNoncacheable()</A> </h3>
<h4>Syntax</h4>
<DL>
  <DD>
  <DT>SetXtraEntryNoncacheable(PIMoaCache<I>This</I>,
  <DD><BR>
    PIMoaXtraEntryDict<I>pXtraDict</I>)
  </DL>
<h4>Parameters</h4>
<DL>
  <DD>
  <DT><CODE><I>This</I></CODE>
  <DD>Pointer to the <CODE>IMoaCache</CODE> interface<BR>
    <BR>
  <DT><CODE><I>pXtraDict</I></CODE>
  <DD><CODE>PIMoaXtraEntryDict</CODE><TT>IMoaDict</TT> interface passed to Register() method <BR>
    <BR>
</DL>
<h4>Returns</h4>
<DL>
  <DT>
  <DD><CODE>MoaError</CODE>
</DL>
<h4>Description</h4>
<DL>
  <DT>
  <DD><BR>
    Use this method to set the specified Xtra as non-cacheable. This
    method is provided for use by certain types of Xtras that need
    to be able to participate in registration each time MOA is started.
    One such Xtra would be an adapter for non-MOA extensions that
    needs to check the presence of specific extension file types and
    cache them independently. <BR>
    <BR>
    When you call <TT>SetXtraEntryNoncacheable() </TT>inside an Xtra's <TT>Register()</TT> method implementation, your Xtra will be registered every time
    a MOA application is started. The information provided by <TT>Register()</TT> is analyzed for the current runtime but is never stored in the
    cache. In general, you shouldn't make an Xtra non-cacheable, since
    it delays MOA start-up time (and thus app launch time). <BR>
    <BR>
</DL>
<P>
<hr width=45% align=left>
<A HREF = "../copyrite.htm">Copyright &#169; 1995-2007 Adobe Macromedia Software LLC, Inc.</A>
</BODY>
</html>
