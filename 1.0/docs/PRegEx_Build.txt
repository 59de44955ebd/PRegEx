=================================================
PRegEx Version 1.0 Build Notes

	- This document last updated 2001-06-04
=================================================

	This document should be read by people who want to build, modify,
	or review the source code for PRegEx.  Everyone else can ignore it.

	Part of the philosophy of an open source project is to include
	everything anyone would need to completely rebuild the project
	from scratch.

	Accordingly, PRegEx is always released along with the complete
	source and documentation and all of the rest of the files you will
	need to build the project yourself from scratch and get started
	right away working with the source code.


Prerequisites:

	- Director 7.0 or later for both Mac and Windows.

	- CodeWarrior 6.0 for the Mac

	- Virtual C++ 6.0 for Windows


Mac build Instructions:

	- Open the project file ":build_mac:PRegEx.cw6".

	- Choose "Make"  (Command-M).

	- Ignore the 4 MOA-related warnings.  According to Macromedia,
      these are unavoidable.

	- The resulting file is ":xtras:PRegEx".

	- Run the test suite in :test:PRegExTestMovie.dir


Windows build Instructions:

	- Open the project file ":build_win:PRegEx:PRegEx.dsw".

	- Build the "Debug" configuration (if desired)
		- Menu item: Build / Set Active Configuration... 
		- Choose  "PRegEx - Win32 Debug" / OK.
		- Menu item: Build / "Build" (F7) or "Rebuild All".
		- The resulting file is ":make_win:debug:pregex.x32".

	- Build the "Release" configuration
		- Menu item: Build / Set Active Configuration... 
		- Choose  "PRegEx - Win32 Release" / OK.
		- Menu item: Build / "Build" (F7) or "Rebuild All".
		- The resulting file is ":xtras:pregex.x32".

	- Run the test suite in :test:PRegExTestMovie.dir

	- Test Release build (and Debug build, if desired).


Source files:

	1) primary xtra source files

	:source:re_main.cpp		==> All the source is in here.
	:source:re_main.h
	:source:re_reg.cpp		==> Entry point descriptions for Lingo
	:source:re_reg.h
	:source:re_xtra.cpp		==> MOA Housekeeping stuff.

	These are the real source files for the Xtra itself.

	1) pcre_custom files

	:source:pcre_custom:chartables.c	
	:source:pcre_custom:config.h
	:source:pcre_custom:pcre.h

	This items are PRegEx's customized versions of the files that must
	be customized by any project that wants to use PCRE.  You can
	compare them to the ones in pcre-3.4 to see the differences.

	chartables.c is a file that was built, according to the
	instructions included with PCRE, when first preparing a build of
	PCRE.  It contains a list of character classes for PRegEx
	processing.  Note that we use the same one on both platforms, so
	the named character classes in PRegEx may not correctly handle
	upper-ascii characters.

	3) other files

	:source:resource.h
		
	I don't know the purpose of this file.  But it says it's needed by
	the Windows build, so I take it at its word.


Preparation of necessary libraries:

	1) PCRE		

	PRegEx uses PCRE, from http://pcre.org/.  It is based on the 3.4
	version of PCRE, which is included here.

	In order to have a source code base which is 100% cross-platform
	compatible for PRegEx's build needs, we had to make a few
	modifications to the PCRE source code (change line ending formats
	to DOS, and also expose one formerly-static global table).

	Those changes are performed automatically by and documented in a
	perl script called ":make_begin:prep_pcre.pl".

	The PRegEx distribution includes a directory called ":pcre-3.4:"
	which has already had these modifications made.
	
	However if you're interested in hygiene, you are encouraged to
	download a fresh copy of the PCRE distribution, untar it, and
	apply the changes mentioned in the script.

	We hope that the ease of doing this will make it easy to adapt to
	future upgrades and/or bug fixes to PCRE, if any.

	2) Macromedia XDK

	You need to get the XDK from Macromedia. http://macromedia.com/

	For this project, we have included a minimal (NOT COMPLETE) "xdk"
	directory that contains only the header files and libraries of the
	XDK needed for the build to run.  Since Macromedia does not
	distribute the XDK in such a way that single version of it can be
	used to build code on both platforms, we had to piece together the
	following items and place them into a single directory tree:

	:xdk:Include				==> From the Windows XDK (DOS endings)
	:xdk:Include:macppc
	:xdk:Include:win32

	:xdk:Lib	
	:xdk:Lib:Mac				==> From the Mac XDK
	:xdk:Lib:Win				==> From the Windows XDK

	:xdk:Runtime
	:xdk:Runtime:Mac			==> From the Mac XDK
	:xdk:Runtime:Mac:Include	==> From the Mac XDK

	The items included are from the Director 8 version of the XDK, but
	the features of PRegEx are all compatible with Director 7 and
	later.  (It was developed entirely using Director 7.)  We have not
	tested on earlier versions.
	

How to prepare a release of PRegEx:

	- Do a complete, fresh, build on both platforms.  

	- Open the test movie on one platform.

	- Run the full test suite, with leak testing turned on.  Make sure
      it comes up clean.

	- Open the test movie on the other platform.

	- Run the full test suite, with leak testing turned on.  Make sure
      it comes up clean.

	- Import the spec one more time for good measure.  This also adds
      a date stamp to the top of the scrolling field.

	- Save and Compact the Director file.

	- Remove any backup / temporary files in the current project tree.

	- Open the Mac project.  Do a "Remove Object Code..."
      (Command-dash), and choose "Compact Target".

	- Manually delete these 5 items from the :make_win: directory:
	  
		:make_win:PRegEx:pregex.ncb
		:make_win:PRegEx:pregex.opt
		:make_win:PRegEx:pregex.plg	  
		:make_win:Debug:	(entire directory)
		:make_win:Release:	(entire directory)

	  (Do NOT delete these items:)

		:make_win:PRegEx.def
		:make_win:PRegEx:PRegEx.dsp
		:make_win:PRegEx:PRegEx.dsw

	- Delete these files from the :xtras: directory:

		:xtras:PRegEx.xSYM	(Mac symols file)

    - Copy master directory to a hard drive on a Mac (if it was on a
      file server).  (Sometimes Stuffit screws up if the stuffed source
      is on a file server.)

	- Rename copied directory to "pregex-1.XX" (XX = sub-version num).
 
    - Use DropStuff to stuff the entire directory into a single .sit
      file called pregex-1.XX.sit.

	- Verify that the file unstuffs cleanly.

	- Add the release to an archive somewhere and back it up.



Note to Contributors:

	I (Chris) very much hope you'll send me contributed enhancements
	to PRegEx.  I would love to add them.

	However, please don't contribute any source code for new PRegEx
	features unless you do all of the following:

	- Build and test on BOTH Mac and Windows.

	- Write a Director-based test suite, including leak testing, that
      tests all behaviors and all paths through your new function, and
      verify that it runs cleanly on both platforms.  Be sure you test
      the test, too, to make sure it's not simply failing to report
      errors that may be present.

	- Write documentation for your new function or feature similar in
      style, tone, level, and depth to that in the current PRegEx Spec.

	- Clearly specify which version of PRegEx your modified source code
      was based on.  Knowing this will help in merging into the
      current build, if different.

	- Send a stuffed .sit file (using Stuffit on the Mac), COMPLETE,
      BUILDABLE PRegEx project tree that contains a complete set of
      your changes as well as the testing information and any other
      documentation.  Please follow all the packaging instructions
      listed in the previous sections.

	- Include a road map of what you changed, as a text file in the
      docs folder of the distribution itself.

	- Include a brief cover note in your e-mail saying what I should
      look for after I unpack the attachment.

	In other words: it should take me about 3 minutes to review and
	test your proposed changes and about another 10 for me to merge
	them into the master release.  If it takes much longer than this,
	I might not have the time.

